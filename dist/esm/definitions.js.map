{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC;AA0jCxC;;GAEG;AACH,MAAM,CAAN,IAAY,OAQX;AARD,WAAY,OAAO;IACjB,yCAAU,CAAA;IACV,yCAAU,CAAA;IACV,2CAAW,CAAA;IACX,+CAAa,CAAA;IACb,6CAAY,CAAA;IACZ,yCAAU,CAAA;IACV,6CAAY,CAAA;AACd,CAAC,EARW,OAAO,KAAP,OAAO,QAQlB","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\r\n\r\nimport type { PermissionState, PluginListenerHandle } from '@capacitor/core';\r\n\r\ndeclare module '@capacitor/cli' {\r\n  export interface PluginsConfig {\r\n    /**\r\n     * On Android, the Local Notifications can be configured with the following options:\r\n     */\r\n    LocalNotifications?: {\r\n      /**\r\n       * Set the default status bar icon for notifications.\r\n       *\r\n       * Icons should be placed in your app's `res/drawable` folder. The value for\r\n       * this option should be the drawable resource ID, which is the filename\r\n       * without an extension.\r\n       *\r\n       * Only available for Android.\r\n       *\r\n       * @since 1.0.0\r\n       * @example \"ic_stat_icon_config_sample\"\r\n       */\r\n      smallIcon?: string;\r\n\r\n      /**\r\n       * Set the default color of status bar icons for notifications.\r\n       *\r\n       * Only available for Android.\r\n       *\r\n       * @since 1.0.0\r\n       * @example \"#488AFF\"\r\n       */\r\n      iconColor?: string;\r\n\r\n      /**\r\n       * Set the default notification sound for notifications.\r\n       *\r\n       * On Android 26+ it sets the default channel sound and can't be\r\n       * changed unless the app is uninstalled.\r\n       *\r\n       * If the audio file is not found, it will result in the default system\r\n       * sound being played on Android 21-25 and no sound on Android 26+.\r\n       *\r\n       * Only available for Android.\r\n       *\r\n       * @since 1.0.0\r\n       * @example \"beep.wav\"\r\n       */\r\n      sound?: string;\r\n    };\r\n  }\r\n}\r\n\r\nexport interface LocalNotificationsPlugin {\r\n  /**\r\n   * Schedule one or more local notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  schedule(options: ScheduleOptions): Promise<ScheduleResult>;\r\n\r\n  /**\r\n   * Get a list of pending notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  getPending(): Promise<PendingResult>;\r\n\r\n  /**\r\n   * Register actions to take when notifications are displayed.\r\n   *\r\n   * Only available for iOS and Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  registerActionTypes(options: RegisterActionTypesOptions): Promise<void>;\r\n\r\n  /**\r\n   * Cancel pending notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  cancel(options: CancelOptions): Promise<void>;\r\n\r\n  /**\r\n   * Check if notifications are enabled or not.\r\n   *\r\n   * @deprecated Use `checkPermissions()` to check if the user has allowed\r\n   * notifications to be displayed.\r\n   * @since 1.0.0\r\n   */\r\n  areEnabled(): Promise<EnabledResult>;\r\n\r\n  /**\r\n   * Get a list of notifications that are visible on the notifications screen.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  getDeliveredNotifications(): Promise<DeliveredNotifications>;\r\n\r\n  /**\r\n   * Remove the specified notifications from the notifications screen.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  removeDeliveredNotifications(\r\n    delivered: DeliveredNotifications,\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Remove all the notifications from the notifications screen.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  removeAllDeliveredNotifications(): Promise<void>;\r\n\r\n  /**\r\n   * Create a notification channel.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  createChannel(channel: Channel): Promise<void>;\r\n\r\n  /**\r\n   * Delete a notification channel.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  deleteChannel(args: { id: string }): Promise<void>;\r\n\r\n  /**\r\n   * Get a list of notification channels.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  listChannels(): Promise<ListChannelsResult>;\r\n\r\n  /**\r\n   * Check permission to display local notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  checkPermissions(): Promise<PermissionStatus>;\r\n\r\n  /**\r\n   * Request permission to display local notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  requestPermissions(): Promise<PermissionStatus>;\r\n\r\n  /**\r\n   * Listen for when notifications are displayed.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'localNotificationReceived',\r\n    listenerFunc: (notification: LocalNotificationSchema) => void,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Listen for when an action is performed on a notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  addListener(\r\n    eventName: 'localNotificationActionPerformed',\r\n    listenerFunc: (notificationAction: ActionPerformed) => void,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n\r\n  /**\r\n   * Remove all listeners for this plugin.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  removeAllListeners(): Promise<void>;\r\n}\r\n\r\n/**\r\n * The object that describes a local notification.\r\n *\r\n * @since 1.0.0\r\n */\r\nexport interface LocalNotificationDescriptor {\r\n  /**\r\n   * The notification identifier.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: number;\r\n}\r\n\r\nexport interface ScheduleOptions {\r\n  /**\r\n   * The list of notifications to schedule.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notifications: LocalNotificationSchema[];\r\n}\r\n\r\nexport interface ScheduleResult {\r\n  /**\r\n   * The list of scheduled notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notifications: LocalNotificationDescriptor[];\r\n}\r\n\r\nexport interface PendingResult {\r\n  /**\r\n   * The list of pending notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notifications: PendingLocalNotificationSchema[];\r\n}\r\n\r\nexport interface RegisterActionTypesOptions {\r\n  /**\r\n   * The list of action types to register.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  types: ActionType[];\r\n}\r\n\r\nexport interface CancelOptions {\r\n  /**\r\n   * The list of notifications to cancel.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notifications: LocalNotificationDescriptor[];\r\n}\r\n\r\n/**\r\n * A collection of actions.\r\n *\r\n * @since 1.0.0\r\n */\r\nexport interface ActionType {\r\n  /**\r\n   * The ID of the action type.\r\n   *\r\n   * Referenced in notifications by the `actionTypeId` key.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The list of actions associated with this action type.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  actions?: Action[];\r\n\r\n  /**\r\n   * Sets `hiddenPreviewsBodyPlaceholder` of the\r\n   * [`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosHiddenPreviewsBodyPlaceholder?: string;\r\n\r\n  /**\r\n   * Sets `customDismissAction` in the options of the\r\n   * [`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosCustomDismissAction?: boolean;\r\n\r\n  /**\r\n   * Sets `allowInCarPlay` in the options of the\r\n   * [`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosAllowInCarPlay?: boolean;\r\n\r\n  /**\r\n   * Sets `hiddenPreviewsShowTitle` in the options of the\r\n   * [`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosHiddenPreviewsShowTitle?: boolean;\r\n\r\n  /**\r\n   * Sets `hiddenPreviewsShowSubtitle` in the options of the\r\n   * [`UNNotificationCategory`](https://developer.apple.com/documentation/usernotifications/unnotificationcategory).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosHiddenPreviewsShowSubtitle?: boolean;\r\n}\r\n\r\n/**\r\n * An action that can be taken when a notification is displayed.\r\n *\r\n * @since 1.0.0\r\n */\r\nexport interface Action {\r\n  /**\r\n   * The action identifier.\r\n   *\r\n   * Referenced in the `'actionPerformed'` event as `actionId`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The title text to display for this action.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * Sets `authenticationRequired` in the options of the\r\n   * [`UNNotificationAction`](https://developer.apple.com/documentation/usernotifications/unnotificationaction).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  requiresAuthentication?: boolean;\r\n\r\n  /**\r\n   * Sets `foreground` in the options of the\r\n   * [`UNNotificationAction`](https://developer.apple.com/documentation/usernotifications/unnotificationaction).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  foreground?: boolean;\r\n\r\n  /**\r\n   * Sets `destructive` in the options of the\r\n   * [`UNNotificationAction`](https://developer.apple.com/documentation/usernotifications/unnotificationaction).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  destructive?: boolean;\r\n\r\n  /**\r\n   * Use a `UNTextInputNotificationAction` instead of a `UNNotificationAction`.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  input?: boolean;\r\n\r\n  /**\r\n   * Sets `textInputButtonTitle` on the\r\n   * [`UNTextInputNotificationAction`](https://developer.apple.com/documentation/usernotifications/untextinputnotificationaction).\r\n   *\r\n   * Only available for iOS when `input` is `true`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  inputButtonTitle?: string;\r\n\r\n  /**\r\n   * Sets `textInputPlaceholder` on the\r\n   * [`UNTextInputNotificationAction`](https://developer.apple.com/documentation/usernotifications/untextinputnotificationaction).\r\n   *\r\n   * Only available for iOS when `input` is `true`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  inputPlaceholder?: string;\r\n}\r\n\r\n/**\r\n * Represents a notification attachment.\r\n *\r\n * @since 1.0.0\r\n */\r\nexport interface Attachment {\r\n  /**\r\n   * The attachment identifier.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The URL to the attachment.\r\n   *\r\n   * Use the `res` scheme to reference web assets, e.g.\r\n   * `res:///assets/img/icon.png`. Also accepts `file` URLs.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  url: string;\r\n\r\n  /**\r\n   * Attachment options.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  options?: AttachmentOptions;\r\n}\r\n\r\nexport interface AttachmentOptions {\r\n  /**\r\n   * Sets the `UNNotificationAttachmentOptionsTypeHintKey` key in the hashable\r\n   * options of\r\n   * [`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosUNNotificationAttachmentOptionsTypeHintKey?: string;\r\n\r\n  /**\r\n   * Sets the `UNNotificationAttachmentOptionsThumbnailHiddenKey` key in the\r\n   * hashable options of\r\n   * [`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosUNNotificationAttachmentOptionsThumbnailHiddenKey?: string;\r\n\r\n  /**\r\n   * Sets the `UNNotificationAttachmentOptionsThumbnailClippingRectKey` key in\r\n   * the hashable options of\r\n   * [`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosUNNotificationAttachmentOptionsThumbnailClippingRectKey?: string;\r\n\r\n  /**\r\n   * Sets the `UNNotificationAttachmentOptionsThumbnailTimeKey` key in the\r\n   * hashable options of\r\n   * [`UNNotificationAttachment`](https://developer.apple.com/documentation/usernotifications/unnotificationattachment).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iosUNNotificationAttachmentOptionsThumbnailTimeKey?: string;\r\n}\r\n\r\nexport interface PendingLocalNotificationSchema {\r\n  /**\r\n   * The title of the notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * The body of the notification, shown below the title.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  body: string;\r\n\r\n  /**\r\n   * The notification identifier.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: number;\r\n\r\n  /**\r\n   * Schedule this notification for a later time.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  schedule?: Schedule;\r\n\r\n  /**\r\n   * Set extra data to store within this notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  extra?: any;\r\n}\r\n\r\nexport interface LocalNotificationSchema {\r\n  /**\r\n   * The title of the notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * The body of the notification, shown below the title.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  body: string;\r\n\r\n  /**\r\n   * Sets a multiline text block for display in a big text notification style.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  largeBody?: string;\r\n\r\n  /**\r\n   * Used to set the summary text detail in inbox and big text notification styles.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  summaryText?: string;\r\n  /**\r\n   * The notification identifier.\r\n   * On Android it's a 32-bit int.\r\n   * So the value should be between -2147483648 and 2147483647 inclusive.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: number;\r\n\r\n  /**\r\n   * Schedule this notification for a later time.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  schedule?: Schedule;\r\n\r\n  /**\r\n   * Name of the audio file to play when this notification is displayed.\r\n   *\r\n   * Include the file extension with the filename.\r\n   *\r\n   * On iOS, the file should be in the app bundle.\r\n   * On Android, the file should be in res/raw folder.\r\n   *\r\n   * Recommended format is `.wav` because is supported by both iOS and Android.\r\n   *\r\n   * Only available for iOS and Android < 26.\r\n   * For Android 26+ use channelId of a channel configured with the desired sound.\r\n   *\r\n   * If the sound file is not found, (i.e. empty string or wrong name)\r\n   * the default system notification sound will be used.\r\n   * If not provided, it will produce the default sound on Android and no sound on iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  sound?: string;\r\n\r\n  /**\r\n   * Set a custom status bar icon.\r\n   *\r\n   * If set, this overrides the `smallIcon` option from Capacitor\r\n   * configuration.\r\n   *\r\n   * Icons should be placed in your app's `res/drawable` folder. The value for\r\n   * this option should be the drawable resource ID, which is the filename\r\n   * without an extension.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  smallIcon?: string;\r\n\r\n  /**\r\n   * Set a large icon for notifications.\r\n   *\r\n   * Icons should be placed in your app's `res/drawable` folder. The value for\r\n   * this option should be the drawable resource ID, which is the filename\r\n   * without an extension.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  largeIcon?: string;\r\n\r\n  /**\r\n   * Set the color of the notification icon.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  iconColor?: string;\r\n\r\n  /**\r\n   * Set attachments for this notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  attachments?: Attachment[];\r\n\r\n  /**\r\n   * Associate an action type with this notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  actionTypeId?: string;\r\n\r\n  /**\r\n   * Set extra data to store within this notification.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  extra?: any;\r\n\r\n  /**\r\n   * Used to group multiple notifications.\r\n   *\r\n   * Sets `threadIdentifier` on the\r\n   * [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  threadIdentifier?: string;\r\n\r\n  /**\r\n   * The string this notification adds to the category's summary format string.\r\n   *\r\n   * Sets `summaryArgument` on the\r\n   * [`UNMutableNotificationContent`](https://developer.apple.com/documentation/usernotifications/unmutablenotificationcontent).\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  summaryArgument?: string;\r\n\r\n  /**\r\n   * Used to group multiple notifications.\r\n   *\r\n   * Calls `setGroup()` on\r\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\r\n   * with the provided value.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  group?: string;\r\n\r\n  /**\r\n   * If true, this notification becomes the summary for a group of\r\n   * notifications.\r\n   *\r\n   * Calls `setGroupSummary()` on\r\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\r\n   * with the provided value.\r\n   *\r\n   * Only available for Android when using `group`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  groupSummary?: boolean;\r\n\r\n  /**\r\n   * Specifies the channel the notification should be delivered on.\r\n   *\r\n   * If channel with the given name does not exist then the notification will\r\n   * not fire. If not provided, it will use the default channel.\r\n   *\r\n   * Calls `setChannelId()` on\r\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\r\n   * with the provided value.\r\n   *\r\n   * Only available for Android 26+.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  channelId?: string;\r\n\r\n  /**\r\n   * If true, the notification can't be swiped away.\r\n   *\r\n   * Calls `setOngoing()` on\r\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\r\n   * with the provided value.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  ongoing?: boolean;\r\n\r\n  /**\r\n   * If true, the notification is canceled when the user clicks on it.\r\n   *\r\n   * Calls `setAutoCancel()` on\r\n   * [`NotificationCompat.Builder`](https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder)\r\n   * with the provided value.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  autoCancel?: boolean;\r\n\r\n  /**\r\n   * Sets a list of strings for display in an inbox style notification.\r\n   *\r\n   * Up to 5 strings are allowed.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  inboxList?: string[];\r\n}\r\n\r\n/**\r\n * Represents a schedule for a notification.\r\n *\r\n * Use either `at`, `on`, or `every` to schedule notifications.\r\n *\r\n * @since 1.0.0\r\n */\r\nexport interface Schedule {\r\n  /**\r\n   * Schedule a notification at a specific date and time.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  at?: Date;\r\n\r\n  /**\r\n   * Repeat delivery of this notification at the date and time specified by\r\n   * `at`.\r\n   *\r\n   * Only available for iOS and Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  repeats?: boolean;\r\n\r\n  /**\r\n   * Allow this notification to fire while in [Doze](https://developer.android.com/training/monitoring-device-state/doze-standby)\r\n   *\r\n   * Only available for Android 23+.\r\n   *\r\n   * Note that these notifications can only fire [once per 9 minutes, per app](https://developer.android.com/training/monitoring-device-state/doze-standby#assessing_your_app).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  allowWhileIdle?: boolean;\r\n\r\n  /**\r\n   * Schedule a notification on particular interval(s).\r\n   *\r\n   * This is similar to scheduling [cron](https://en.wikipedia.org/wiki/Cron)\r\n   * jobs.\r\n   *\r\n   * Only available for iOS and Android.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  on?: ScheduleOn;\r\n\r\n  /**\r\n   * Schedule a notification on a particular interval.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  every?: ScheduleEvery;\r\n\r\n  /**\r\n   * Limit the number times a notification is delivered by the interval\r\n   * specified by `every`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  count?: number;\r\n}\r\n\r\nexport interface ScheduleOn {\r\n  year?: number;\r\n  month?: number;\r\n  day?: number;\r\n  weekday?: Weekday;\r\n  hour?: number;\r\n  minute?: number;\r\n  second?: number;\r\n}\r\n\r\nexport type ScheduleEvery =\r\n  | 'year'\r\n  | 'month'\r\n  | 'two-weeks'\r\n  | 'week'\r\n  | 'day'\r\n  | 'hour'\r\n  | 'minute'\r\n  | 'second';\r\n\r\nexport interface ListChannelsResult {\r\n  /**\r\n   * The list of notification channels.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  channels: Channel[];\r\n}\r\n\r\nexport interface PermissionStatus {\r\n  /**\r\n   * Permission state of displaying notifications.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  display: PermissionState;\r\n}\r\n\r\nexport interface ActionPerformed {\r\n  /**\r\n   * The identifier of the performed action.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  actionId: string;\r\n\r\n  /**\r\n   * The value entered by the user on the notification.\r\n   *\r\n   * Only available on iOS for notifications with `input` set to `true`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  inputValue?: string;\r\n\r\n  /**\r\n   * The original notification schema.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notification: LocalNotificationSchema;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface EnabledResult {\r\n  /**\r\n   * Whether or not the device has local notifications enabled.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  value: boolean;\r\n}\r\n\r\nexport interface DeliveredNotificationSchema {\r\n  /**\r\n   * The notification identifier.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  id: number;\r\n\r\n  /**\r\n   * The notification tag.\r\n   *\r\n   * Only available on Android.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  tag?: string;\r\n  /**\r\n   * The title of the notification.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * The body of the notification, shown below the title.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  body: string;\r\n\r\n  /**\r\n   * The configured group of the notification.\r\n   *\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  group?: string;\r\n\r\n  /**\r\n   * If this notification is the summary for a group of notifications.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  groupSummary?: boolean;\r\n\r\n  /**\r\n   * Any additional data that was included in the\r\n   * notification payload.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  data?: any;\r\n\r\n  /**\r\n   * Extra data to store within this notification.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  extra?: any;\r\n\r\n  /**\r\n   * The attachments for this notification.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  attachments?: Attachment[];\r\n\r\n  /**\r\n   * Action type ssociated with this notification.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  actionTypeId?: string;\r\n\r\n  /**\r\n   * Schedule used to fire this notification.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  schedule?: Schedule;\r\n\r\n  /**\r\n   * Sound that was used when the notification was displayed.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 4.0.0\r\n   */\r\n  sound?: string;\r\n}\r\n\r\nexport interface DeliveredNotifications {\r\n  /**\r\n   * List of notifications that are visible on the\r\n   * notifications screen.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  notifications: DeliveredNotificationSchema[];\r\n}\r\n\r\nexport interface Channel {\r\n  /**\r\n   * The channel identifier.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The human-friendly name of this channel (presented to the user).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The description of this channel (presented to the user).\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * The sound that should be played for notifications posted to this channel.\r\n   *\r\n   * Notification channels with an importance of at least `3` should have a\r\n   * sound.\r\n   *\r\n   * The file name of a sound file should be specified relative to the android\r\n   * app `res/raw` directory.\r\n   *\r\n   * If the sound is not provided, or the sound file is not found no sound will be used.\r\n   *\r\n   * @since 1.0.0\r\n   * @example \"jingle.wav\"\r\n   */\r\n  sound?: string;\r\n\r\n  /**\r\n   * The level of interruption for notifications posted to this channel.\r\n   *\r\n   * @default `3`\r\n   * @since 1.0.0\r\n   */\r\n  importance?: Importance;\r\n\r\n  /**\r\n   * The visibility of notifications posted to this channel.\r\n   *\r\n   * This setting is for whether notifications posted to this channel appear on\r\n   * the lockscreen or not, and if so, whether they appear in a redacted form.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  visibility?: Visibility;\r\n\r\n  /**\r\n   * Whether notifications posted to this channel should display notification\r\n   * lights, on devices that support it.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  lights?: boolean;\r\n\r\n  /**\r\n   * The light color for notifications posted to this channel.\r\n   *\r\n   * Only supported if lights are enabled on this channel and the device\r\n   * supports it.\r\n   *\r\n   * Supported color formats are `#RRGGBB` and `#RRGGBBAA`.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  lightColor?: string;\r\n\r\n  /**\r\n   * Whether notifications posted to this channel should vibrate.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  vibration?: boolean;\r\n}\r\n\r\n/**\r\n * Day of the week. Used for scheduling notifications on a particular weekday.\r\n */\r\nexport enum Weekday {\r\n  Sunday = 1,\r\n  Monday = 2,\r\n  Tuesday = 3,\r\n  Wednesday = 4,\r\n  Thursday = 5,\r\n  Friday = 6,\r\n  Saturday = 7,\r\n}\r\n\r\n/**\r\n * The importance level. For more details, see the [Android Developer Docs](https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT)\r\n * @since 1.0.0\r\n */\r\nexport type Importance = 1 | 2 | 3 | 4 | 5;\r\n\r\n/**\r\n * The notification visibility. For more details, see the [Android Developer Docs](https://developer.android.com/reference/androidx/core/app/NotificationCompat#VISIBILITY_PRIVATE)\r\n * @since 1.0.0\r\n */\r\nexport type Visibility = -1 | 0 | 1;\r\n\r\n/**\r\n * @deprecated Use 'Channel`.\r\n * @since 1.0.0\r\n */\r\nexport type NotificationChannel = Channel;\r\n\r\n/**\r\n * @deprecated Use `LocalNotificationDescriptor`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationRequest = LocalNotificationDescriptor;\r\n\r\n/**\r\n * @deprecated Use `ScheduleResult`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationScheduleResult = ScheduleResult;\r\n\r\n/**\r\n * @deprecated Use `PendingResult`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationPendingList = PendingResult;\r\n\r\n/**\r\n * @deprecated Use `ActionType`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationActionType = ActionType;\r\n\r\n/**\r\n * @deprecated Use `Action`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationAction = Action;\r\n\r\n/**\r\n * @deprecated Use `EnabledResult`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationEnabledResult = EnabledResult;\r\n\r\n/**\r\n * @deprecated Use `ListChannelsResult`.\r\n * @since 1.0.0\r\n */\r\nexport type NotificationChannelList = ListChannelsResult;\r\n\r\n/**\r\n * @deprecated Use `Attachment`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationAttachment = Attachment;\r\n\r\n/**\r\n * @deprecated Use `AttachmentOptions`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationAttachmentOptions = AttachmentOptions;\r\n\r\n/**\r\n * @deprecated Use `LocalNotificationSchema`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotification = LocalNotificationSchema;\r\n\r\n/**\r\n * @deprecated Use `Schedule`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationSchedule = Schedule;\r\n\r\n/**\r\n * @deprecated Use `ActionPerformed`.\r\n * @since 1.0.0\r\n */\r\nexport type LocalNotificationActionPerformed = ActionPerformed;\r\n"]}